// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PetSalon.Models.EntityModels
{
    public partial class PetSalonContext : DbContext
    {
        public PetSalonContext()
        {
        }

        public PetSalonContext(DbContextOptions<PetSalonContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CodeType> CodeType { get; set; }
        public virtual DbSet<ContactPerson> ContactPerson { get; set; }
        public virtual DbSet<NotificationLog> NotificationLog { get; set; }
        public virtual DbSet<PaymentRecord> PaymentRecord { get; set; }
        public virtual DbSet<Pet> Pet { get; set; }
        public virtual DbSet<PetRelation> PetRelation { get; set; }
        public virtual DbSet<ReserveRecord> ReserveRecord { get; set; }
        public virtual DbSet<Scrole> Scrole { get; set; }
        public virtual DbSet<Scuser> Scuser { get; set; }
        public virtual DbSet<Subscription> Subscription { get; set; }
        public virtual DbSet<SubscriptionType> SubscriptionType { get; set; }
        public virtual DbSet<SystemCode> SystemCode { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CodeType>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__CodeType__3214EC270F975522");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CodeType1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CodeType")
                    .HasComment("代碼類型代碼");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("代碼類型名稱");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("描述說明");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("建立者");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("建立時間");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("修改者");

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("修改時間");
            });

            modelBuilder.Entity<ContactPerson>(entity =>
            {
                entity.Property(e => e.ContactPersonId).HasColumnName("ContactPersonID");

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("連絡電話");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("名字");

                entity.Property(e => e.NickName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("暱稱");
            });

            modelBuilder.Entity<NotificationLog>(entity =>
            {
                entity.Property(e => e.NotificationLogId).HasColumnName("NotificationLogID");

                entity.Property(e => e.NotificationType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecipientType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecipientId).HasColumnName("RecipientID");

                entity.Property(e => e.RelatedPetId).HasColumnName("RelatedPetID");

                entity.Property(e => e.RelatedSubscriptionId).HasColumnName("RelatedSubscriptionID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SendMethod)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SendStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValue("PENDING");

                entity.Property(e => e.ScheduledTime).HasColumnType("datetime2");

                entity.Property(e => e.SentTime).HasColumnType("datetime2");

                entity.Property(e => e.ErrorMessage).HasMaxLength(500);

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.NotificationLog)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("FK_NotificationLog_ContactPerson");

                entity.HasOne(d => d.RelatedPet)
                    .WithMany(p => p.NotificationLog)
                    .HasForeignKey(d => d.RelatedPetId)
                    .HasConstraintName("FK_NotificationLog_Pet");

                entity.HasOne(d => d.RelatedSubscription)
                    .WithMany(p => p.NotificationLog)
                    .HasForeignKey(d => d.RelatedSubscriptionId)
                    .HasConstraintName("FK_NotificationLog_Subscription");
            });

            modelBuilder.Entity<PaymentRecord>(entity =>
            {
                entity.Property(e => e.PaymentRecordId).HasColumnName("PaymentRecordID");

                entity.Property(e => e.PetId).HasColumnName("PetID");

                entity.Property(e => e.SubscriptionId).HasColumnName("SubscriptionID");

                entity.Property(e => e.ReserveRecordId).HasColumnName("ReserveRecordID");

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValue("SERVICE");

                entity.Property(e => e.PaymentMethod)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValue("CASH");

                entity.Property(e => e.PaymentStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValue("COMPLETED");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TransactionReference).HasMaxLength(100);

                entity.Property(e => e.ActualPrice).HasColumnType("money");

                entity.Property(e => e.ReceivablePrice).HasColumnType("money");

                entity.Property(e => e.Notes).HasColumnType("nvarchar(max)");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.Pet)
                    .WithMany(p => p.PaymentRecord)
                    .HasForeignKey(d => d.PetId)
                    .HasConstraintName("FK_PaymentRecord_Pet");

                entity.HasOne(d => d.Subscription)
                    .WithMany(p => p.PaymentRecord)
                    .HasForeignKey(d => d.SubscriptionId)
                    .HasConstraintName("FK_PaymentRecord_Subscription");

                entity.HasOne(d => d.ReserveRecord)
                    .WithMany(p => p.PaymentRecord)
                    .HasForeignKey(d => d.ReserveRecordId)
                    .HasConstraintName("FK_PaymentRecord_ReserveRecord");
            });

            modelBuilder.Entity<Pet>(entity =>
            {
                entity.Property(e => e.PetId).HasColumnName("PetID");

                entity.Property(e => e.BirthDay)
                    .HasColumnType("date")
                    .HasComment("生日");

                entity.Property(e => e.Breed)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("品種");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("性別");

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.NormalPrice)
                    .HasColumnType("money")
                    .HasComment("單次價格");

                entity.Property(e => e.PetName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("名字");

                entity.Property(e => e.SubscriptionPrice)
                    .HasColumnType("money")
                    .HasComment("包月價格");
            });

            modelBuilder.Entity<PetRelation>(entity =>
            {
                entity.Property(e => e.PetRelationId).HasColumnName("PetRelationID");

                entity.Property(e => e.ContactPersonId).HasColumnName("ContactPersonID");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.PetId).HasColumnName("PetID");

                entity.Property(e => e.RelationshipType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValue("OWNER")
                    .HasComment("關係類型");

                entity.HasOne(d => d.ContactPerson)
                    .WithMany(p => p.PetRelation)
                    .HasForeignKey(d => d.ContactPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PetRelation_ContactPerson");

                entity.HasOne(d => d.Pet)
                    .WithMany(p => p.PetRelation)
                    .HasForeignKey(d => d.PetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PetRelation_Pet");
            });

            modelBuilder.Entity<ReserveRecord>(entity =>
            {
                entity.Property(e => e.ReserveRecordId).HasColumnName("ReserveRecordID");

                entity.Property(e => e.PetId).HasColumnName("PetID");

                entity.Property(e => e.SubscriptionId).HasColumnName("SubscriptionID");

                entity.Property(e => e.ReserverDate)
                    .HasColumnType("date")
                    .HasColumnName("ReserverDate ");

                entity.Property(e => e.ReserverTime).HasColumnName("ReserverTime ");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValue("PENDING");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(10,2)")
                    .HasDefaultValue(0.00m);

                entity.Property(e => e.UseSubscription)
                    .HasDefaultValue(false);

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SubscriptionDeductionCount)
                    .HasDefaultValue(0);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.Pet)
                    .WithMany(p => p.ReserveRecord)
                    .HasForeignKey(d => d.PetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReserveRecord_Pet_PetID");

                entity.HasOne(d => d.Subscription)
                    .WithMany(p => p.ReserveRecord)
                    .HasForeignKey(d => d.SubscriptionId)
                    .HasConstraintName("FK_ReserveRecord_Subscription_SubscriptionID");
            });

            modelBuilder.Entity<Scrole>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("PK__SCRole__8AFACE3A6F25AC8C");

                entity.ToTable("SCRole");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Scuser>(entity =>
            {
                entity.ToTable("SCUser");

                entity.Property(e => e.ScuserId).HasColumnName("SCUserID");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.LastLogin).HasColumnType("datetime");

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.PasswordHash)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserName).HasMaxLength(20);
            });

            modelBuilder.Entity<Subscription>(entity =>
            {
                entity.Property(e => e.SubscriptionId).HasColumnName("SubscriptionID");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.PetId).HasColumnName("PetID");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.SubscriptionDate).HasColumnType("date");

                entity.Property(e => e.SubscriptionTypeId).HasColumnName("SubscriptionTypeID");

                entity.HasOne(d => d.Pet)
                    .WithMany(p => p.Subscription)
                    .HasForeignKey(d => d.PetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Subscription_Pet");

                entity.HasOne(d => d.SubscriptionTypeNavigation)
                    .WithMany(p => p.Subscription)
                    .HasForeignKey(d => d.SubscriptionTypeId)
                    .HasConstraintName("FK_Subscription_SubscriptionType");
            });

            modelBuilder.Entity<SystemCode>(entity =>
            {
                entity.HasKey(e => e.CodeId)
                    .HasName("PK__SystemCo__C6DE2C358B5ECB32");

                entity.HasIndex(e => new { e.CodeType, e.Code }, "UQ_CodeType")
                    .IsUnique();

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodeType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyUser)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}